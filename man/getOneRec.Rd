% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jqmongo.R
\name{getOneRec}
\alias{getOneRec}
\alias{getManyRecs}
\title{Fetches Messages from a Mongo databas}
\usage{
getOneRec(
  col,
  jquery = "{}",
  builder = buildObject,
  sort = buildJQuery(timestamp = -1)
)

getManyRecs(
  col,
  jquery,
  builder = buildObject,
  sort = buildJQuery(timestamp = -1),
  skip = 0,
  limit = 0
)
}
\arguments{
\item{col}{(or MongoDB mongo) A reference to a Mongo collection.}

\item{jquery}{A string providing a Mongo JQuery to select the appropriate
records.  See \code{\link{buildJQuery}}.}

\item{builder}{A function which will take the list of fields returned from
the database and build an appropriate R object.  See
\code{\link{buildObject}}.}

\item{sort}{A named numeric vector giving sorting instructions.  The names
should correspond to fields of the objects, and the values should be positive
or negative one for increasing or decreasing order. Use the value
\code{NULL} to leave the results unsorted.}

\item{skip}{integer  This many records should be skipped before returning records}

\item{limit}{A numeric scalar giving the maximum number of objects to
retrieve.  If `Inf`, then all objects matching the query will be retrieved.}
}
\value{
The function \code{getOneRec} returns an object whose type is determined by
the output of the \code{builder} function.  The default `\link{buildObject}` method uses
the `class` field of the record is used to select the object type.  (It assumes a `\link{parse.jlist}`
method is available for that object type.)

The function \code{getManyRecs} returns a list of object whose type is
determined by the output of the \code{builder} function.
}
\description{
This function fetches \code{\linkS4class{MongoRec}} objects from a
\code{\link[mongolite]{mongo}} database.  The message parser is passed as an
argument, allowing it to fetch other kinds of objects than P4Messages.  The
function \code{getManyRecs} retrieves all matching objects and the function
\code{getOneRec} retrieves the first matching object.
}
\details{
This function assumes that a number of objects (usually, but not necessarily
subclasses of \code{\link{MongoRec}} objects) have been stored in a Mongo
database.  The \code{col} argument is the \code{\link{MongoDB}}
object in which they are stored.  These functions retrieve the selected
objects.

The first argument should be a string containing a JSON query document.
Normally, thes are constructed through a call to \code{\link{buildJQuery}}.

The query is used to create an iterator over JSON documents stored in the
database.  At each round, the iterator extracts the JSON document as a
(nested) list structure.  This is passed to the \code{builder} function to
build an object of the specified type.  See the \code{\link{buildObject}}
function for an example builder.

The sorting argument controls the way the returned list of objects is
sorted. This should be a numeric vector with names giving the field for
sorting.  The default values \code{c("timestamp"=1)} and
\code{c("timestamp"=-1)} sort the records in ascending and descending order
respectively.  In particular, the default value for \code{getOneRec} means
that the most recent value will be returned.  The defaults assume that
\dQuote{timestamp} is a field of the stored object.  To suppress sorting of
outputs, use \code{NULL} as the argument to \code{sort}.
}
\examples{

\dontrun{
## Requires Mongo test database to be set up.
load_Events()

m1 <- new("Event", uid="James Goodfellow",mess="Task Done",processed=FALSE,
           timestamp=Sys.time(),
           data=list("Selection"="B"))
m2 <- new("Event", uid="James Goodfellow", mess="New Obs", processed=FALSE,
           timestamp=Sys.time(),
           data=list("isCorrect"=TRUE,"Selection"="B"))
m3 <- new("Event", uid="Fred",mess="New Stats",
           timestamp=Sys.time(),
           data=list("score"=1,"theta"=0.12345,"noitems"=1))

EventDB <- MongoDB(Event,noMongo=!interactive())

Assign these back to themselves to capture the mongo ID
m1 <- saveRec(EventDB,m1)
m2 <- saveRec(EventDB,m2)
m3 <- saveRec(EventDB,m3)

m1@data$time <- list(tim=25.4,units="secs")
m1 <- saveRec(EventDB,m1)

## Note use of oid keyword to fetch object by Mongo ID.
m1a <- getOneRec(EventDB,buildJQuery("_id"=c(oid=m1@"_id")))
m123 <- getManyRecs(EventDB,buildJQuery(uid="Fred"))
m23 <- getManyRecs(EventDB,buildJQuery(uid="Fred",sender=c("EI","EA")))
m321 <- getManyRecs(EventDB,buildJQuery(uid="Fred",timestamp=c(lte=Sys.time())),
            sort=c(timestamp=-1))
getManyRecs(EventDB,buildJQuery(uid="Fred",
                          timestamp=c(gte=Sys.time()-as.difftime(1,units="hours"))))


}
}
\references{
The MongoDB Manual: \url{https://docs.mongodb.com/manual/}
}
\seealso{
\code{\link{saveRec}}, \code{\link{buildObject}},
\code{\link{getOneRec}}, \code{\link{getManyRecs}}
\code{\link[mongolite]{mongo}}
}
\author{
Russell Almond
}
\keyword{database}
\keyword{interface}
