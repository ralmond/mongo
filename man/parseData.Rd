% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as.json.R
\name{parseData}
\alias{parseData}
\alias{unparseData}
\title{Prepare R data for storage or restore R data from jlist
#'
The \code{parseData} function is a helper function for \code{\link[=parse.jlist]{parse.jlist()}} methods, and \code{unparseData}
for \code{\link[=as.jlist]{as.jlist()}}, which represents complex objects as JSON.}
\usage{
parseData(messData)

unparseData(data, serialize = TRUE)
}
\arguments{
\item{messData}{(or character jlist)}

\item{data}{ANY the data to be saved.}

\item{serialize}{logical if Tru}
}
\value{
\code{parseData} returns the parsed object.  \code{unparseData} returns a jlist or character scalar
which can be saved.
}
\description{
Prepare R data for storage or restore R data from jlist
#'
The \code{parseData} function is a helper function for \code{\link[=parse.jlist]{parse.jlist()}} methods, and \code{unparseData}
for \code{\link[=as.jlist]{as.jlist()}}, which represents complex objects as JSON.
}
\details{
There are three strategies for saving/restoring an R object a JSON.
\itemize{
\item Use the \verb{\link[jsonlite]\{serializeJSON\}} and \verb{\link[jsonlite]\{unserializeJSON\}} method.
This will faithfully reproduce the object, but it will be difficult to manipulate the object
outside of R.
\item For an S4 object write a \code{\link[=as.jlist]{as.jlist()}} and \code{\link[=parse.jlist]{parse.jlist()}} method.
\item For a S3 object or just a list of arbitrary objects, write out the object using
\verb{\link[jsonlite]\{toJSON\}} and fix up the types of the components when the object is read back in.
}

When \code{unparseData(...,serialize=TRUE)} is called, then \code{parseData} and \code{unparseData}
take the first approache.

Otherwise, it takes the third approach.  In particular, \verb{\link[jsonlite]\{fromJSON\}} turns
a vector which contains all elements of the same type
(currently only "logical", "integer", "numeric" and "character")
it turns the list into a vector of the corresponding mode.
}
\examples{

dat <- list(chars=letters[1:3], nums=c(-3.3, 4.7),
  ints=1L:3L, logic=c(TRUE,FALSE))
j1 <- jsonlite::toJSON(unparseData(dat))
j2 <- unparseData(dat,serialize=TRUE)
jsonlite::fromJSON(j1)
parseData(jsonlite::fromJSON(j1))
parseData(jsonlite::fromJSON(j2))

}
