% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MongoDB.R
\name{mdbIterate}
\alias{mdbIterate}
\alias{mdbIterate,MongoDB-method}
\alias{mdbIterate,mongo-method}
\alias{mdbFindL}
\alias{mdbFindL,JSONDB-method}
\title{Returns documents as lists (jlists) from the database.}
\usage{
mdbIterate(
  db,
  query = "{}",
  fields = "{\\"_id\\":0}",
  sort = "{}",
  skip = 0,
  limit = 0
)

\S4method{mdbIterate}{MongoDB}(
  db,
  query = "{}",
  fields = "{\\"_id\\":0}",
  sort = "{}",
  skip = 0,
  limit = 0
)

\S4method{mdbIterate}{mongo}(
  db,
  query = "{}",
  fields = "{\\"_id\\":0}",
  sort = "{}",
  skip = 0,
  limit = 0
)

mdbFindL(
  db,
  query = "{}",
  fields = "{\\"_id\\":0}",
  sort = "{}",
  skip = 0,
  limit = 0
)

\S4method{mdbFindL}{JSONDB}(
  db,
  query = "{}",
  fields = "{\\"_id\\":0}",
  sort = "{}",
  skip = 0,
  limit = 0
)
}
\arguments{
\item{db}{(or MongoDB mongo) -- the database collection.}

\item{query}{character -- A query string in \code{JSON} format.  See
\verb{\link{buildJQuery}} and \code{\link{mdbFind}.}}

\item{fields}{character -- A JSON expression describing which
fields to extract from the selected records.  The default returns
all fields except for the internal Mongo id field (see \verb{\link{m_id}}.}

\item{sort}{character -- A JSON field indicating how the record
should be sorted.}

\item{skip}{integer -- The number of records to skip.}

\item{limit}{integer -- The maximum number of records to return.}
}
\value{
An iterator with the values.
}
\description{
Returns documents as lists (jlists) from the database.
}
\details{
Unlike the \verb{\link{mdbFind}} operation, which converts to the query
output to a data frame, \code{mdbIterate} produces an iterator, which
will cycle through the query results, which are returned as \verb{\link{jlist}}
objects.
}
\section{Iterators}{


The iterator object returned from this function has two methods:
\itemize{
\item \verb{$one()}  -- Returns the next object, or \code{NULL} if there is none.
\item \verb{$batch(n)} -- Returns the next \code{n} objects.
}
}

\examples{
irisdb <- MongoDB("iris",noMongo=!interactive())
mdbDrop(irisdb)
mdbInsert(irisdb,iris)
iter <- mdbIterate(irisdb,limit=10)
if (!is.null(iter)) {
iter$one()
iter$batch(3)
## Note extra parens.
while (!is.null((item <- iter$one()))) {
  print(sprintf("A \%s iris with petal length \%f",
                item$Species,item$Petal_Length))
}
}
}
\seealso{
[\link[mongolite]{mongo}]
}
