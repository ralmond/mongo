% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MongoDB.R
\name{mdbAggregate}
\alias{mdbAggregate}
\alias{mdbAggregate,MongoDB-method}
\alias{mdbAggregate,mongo-method}
\title{Execute Aggregration Pipeline}
\usage{
mdbAggregate(
  db,
  pipeline = "{}",
  options = "{\\"allowDiskUse\\":true}",
  handler = NULL,
  pagesize = 1000,
  iterate = FALSE
)

\S4method{mdbAggregate}{MongoDB}(
  db,
  pipeline = "{}",
  options = "{\\"allowDiskUse\\":true}",
  handler = NULL,
  pagesize = 1000,
  iterate = FALSE
)

\S4method{mdbAggregate}{mongo}(
  db,
  pipeline = "{}",
  options = "{\\"allowDiskUse\\":true}",
  handler = NULL,
  pagesize = 1000,
  iterate = FALSE
)
}
\arguments{
\item{db}{MongoDB or mongo -- The database collection handle.}

\item{pipeline}{character -- a json object describing the pipeline.}

\item{options}{character -- a json object giving options to the pipeline.  (This is missing from
the `mongolite` documentation, so see Mongo documentation).}

\item{handler}{-- undocumented.}

\item{pagesize}{integer -- Size of pages}

\item{iterate}{logical -- If `TRUE` return an iterator (see `\link{mdbIterate}`), if false a `data.frame`.}
}
\value{
Data frame or iterator with query results.
}
\description{
Execute Aggregration Pipeline
}
\details{
Execute a pipeline using the Mongo aggregation framework.  Set `iterate = TRUE` to return an iterator
instead of a data frame.
}
\examples{
irisdb <- MongoDB("iris",noMongo=!interactive())
mdbDrop(irisdb)
mdbInsert(irisdb,iris)
stats <- mdbAggregate(irisdb,
  paste('[{"$group":{"_id":"$Species", "count": {"$sum":1},',
                    '"average_Petal_Length": {"$avg":"$Petal_Length"}',
                    '}}]'),
  options = '{"allowDiskUse":true}'
)
if (!is.null(stats)) {
  names(stats) <- c("Species", "Count", "Petal Length")
}
print(stats)
}
\seealso{
[\link[mongolite]{mongo}]
\url{https://www.mongodb.com/docs/manual/reference/command/aggregate/}
}
