% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MongoDB.R
\docType{class}
\name{MongoDB-class}
\alias{MongoDB-class}
\alias{MongoDB}
\title{MongoDB -- Reference class wrapping a connection to a Mongo database collection.}
\usage{
MongoDB(
  collection = "test",
  db = "test",
  url = "mongodb://localhost",
  verbose = FALSE,
  noMongo = FALSE,
  options = mongolite::ssl_options()
)
}
\arguments{
\item{collection}{character -- name of collection}

\item{db}{character -- name of database}

\item{url}{character -- URI for mongo connection (see \code{\link[=makeDBuri]{makeDBuri()}})}

\item{verbose}{logical -- Should operate in verbose mode.}

\item{noMongo}{logical -- If true, then no connection to Mongo database will be made,
and CRUD operations will become no-ops.}

\item{options}{-- SSL options for connections, see \code{\link[mongolite:ssl_options]{mongolite::ssl_options()}}.}
}
\value{
An object of class \code{MongoDB}
}
\description{
MongoDB -- Reference class wrapping a connection to a Mongo database collection.
}
\details{
Including a \link[mongolite]{mongo} object in an Reference class presents a potential race condition.
The prototype class is built at package load time, however, calling the \verb{\link[mongolite]\{mongo\}} may not work
at this time.  The \code{MongoDB} class works around this by capturing the arguments to the \code{mongo} call, and then
creating the actual database connection when the database is first accessed.  The database should always be accessed
through the \verb{$db()} method which builds the database if needed.
}
\section{Fields}{

\describe{
\item{\code{mongoObj}}{ANY -- This is the actual
\verb{\link[mongolite]\{mongo\}} object or \code{NULL} if it has
not been initialized yet.}

\item{\code{uri}}{character -- URI for the mongo connection.}

\item{\code{dbname}}{character -- The name of the mongo database.}

\item{\code{colname}}{character -- The name of the mongo collection}

\item{\code{noMongo}}{logical -- If \code{TRUE}, then the
This allows a class which contains a reference to a
Mongo database to ignore the database calls when
there is no database to connect to.}

\item{\code{verbose}}{logical -- This field is passed on
to the \verb{\link[mongolite]\{mongo\}} call.}

\item{\code{options}}{ANY -- This field is passed on to
the  \verb{\link[mongolite]\{mongo\}} call.  It is used to
store additional SSL connection information, see
\verb{\link[mongolite]\{ssl_options\}}.}
}}


\note{
Many of the examples use \code{MongoDB(...,noMongo=!interactive())}.
This means the dummy mechanism will be used during package checking
(where Mongo may or may not be available in the development
environment), but running the examples from the help files will
make the connections (and will generate an error if Mongo is not
installed).
}
\section{Class-based Methods}{

\itemize{
\item \verb{$initialize(collection, db, url, verbose, options, ...)} -- Constructor.
\item \verb{$db()} --   Returns the the actual database connection
(\verb{\link[mongolite]\{mongo\}} object), or \code{NULL} if \code{uri==""} or
\code{noMongo==TRUE}.  If the actual call to `\link[mongolite]{mongo}
has not been made, this method will create the connection;
otherwise, the cached connection is returned.
\item \verb{$available()} --  Returns false if no database is present (i.e.,
\code{noMongo} is \code{TRUE}. Used to suppress actual mongo calls when
database is not available.
\item \verb{$resetDB()} -- Resets the \code{mongoObj} field to force a
reconnection to Mongo the next time \verb{$db()} is called.  This is
probably useful to call when restoring an R session.
\item \verb{$toString()} -- Returns a string represenation of an object.
}
}

\section{Methods}{


The S4 generic functions correspond to the normal \link{CRUD}
(Create, Read, Update and Delete) methods.  Particularly:
\verb{\link{mdbAggregate}}, \verb{\link{mdbCount}}, \verb{\link{mdbDisconnect}}, \verb{\link{mdbDrop}},
\verb{\link{mdbExport}}, \verb{\link{mdbFind}}, \verb{\link{mdbImport}}, \verb{\link{mdbIndex}},
\verb{\link{mdbInsert}}, \verb{\link{mdbIterate}}, \verb{\link{mdbMapreduce}},
\verb{\link{mdbRemove}}, \verb{\link{mdbRename}}, \verb{\link{mdbReplace}},
\verb{\link{mdbRun}}, \verb{\link{mdbUpdate}}, \verb{\link{showCollections}} and
\verb{\link{showDatabases}}.
}

\examples{
mdp <- MongoDB("test","test","mongodb://localhost")
\dontrun{
# This will generate an error if mongo doesn't exist.
mdbCount(mdp,'{}')
}
nullmdp <- MongoDB(noMongo=TRUE)
mdbCount(nullmdp)
# This will return `NA`.
}
\seealso{
[\link[mongolite]{mongo}]
More extensive documentation on most of the \code{mdbXXX} functions can be found at the Mongo API documentation web site.
\url{https://www.mongodb.com/docs/manual/reference/command/}
}
