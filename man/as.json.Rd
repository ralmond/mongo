% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as.json.R
\name{as.json}
\alias{as.json}
\alias{as.json,ANY-method}
\alias{as.jlist}
\alias{as.jlist,ANY,list-method}
\alias{as.json,MongoRec-method}
\alias{as.jlist,MongoRec,list-method}
\title{Converts S4 objects to JSON representation.}
\usage{
as.json(
  x,
  serialize = TRUE,
  dataframe = c("rows", "columns", "values"),
  matrix = c("rowmajor", "columnmajor"),
  Date = c("ISO8601", "epoch"),
  POSIXt = c("string", "ISO8601", "epoch", "mongo"),
  factor = c("string", "list"),
  complex = c("string", "list"),
  raw = c("base64", "hex", "mongo", "int", "js"),
  null = c("list", "null"),
  na = c("null", "string")
)

as.jlist(obj, ml, serialize = TRUE)

\S4method{as.json}{ANY}(
  x,
  serialize = TRUE,
  dataframe = c("rows", "columns", "values"),
  matrix = c("rowmajor", "columnmajor"),
  Date = c("ISO8601", "epoch"),
  POSIXt = c("string", "ISO8601", "epoch", "mongo"),
  factor = c("string", "list"),
  complex = c("string", "list"),
  raw = c("base64", "hex", "mongo", "int", "js"),
  null = c("list", "null"),
  na = c("null", "string")
)

\S4method{as.json}{MongoRec}(
  x,
  serialize = TRUE,
  dataframe = c("rows", "columns", "values"),
  matrix = c("rowmajor", "columnmajor"),
  Date = c("ISO8601", "epoch"),
  POSIXt = c("string", "ISO8601", "epoch", "mongo"),
  factor = c("string", "list"),
  complex = c("string", "list"),
  raw = c("base64", "hex", "mongo", "int", "js"),
  null = c("list", "null"),
  na = c("null", "string")
)

\S4method{as.jlist}{ANY,list}(obj, ml, serialize = TRUE)

\S4method{as.jlist}{MongoRec,list}(obj, ml, serialize = TRUE)
}
\arguments{
\item{x}{An (S4) object to be serialized.}

\item{serialize}{logical -- Preserve all R information at the expense of legibility. Passed to \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}}

\item{dataframe}{("rows", "columns", "values") -- Order for data frames. Passed to \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}}

\item{matrix}{("rowmajor" "columnmajor") -- Order for matrix elements.  Passed to \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}}

\item{Date}{("ISO8601" "epoch") -- Passed to \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}}

\item{POSIXt}{("string" "ISO8601" "epoch" "mongo") -- Date/time format. Passed to \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}}

\item{factor}{("string" "list") -- Treatment of factor variables.  Passed to \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}}

\item{complex}{("string" "list") -- Representation for complex numbers.  Passed to \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}}

\item{raw}{("base64" "hex" "mongo" "int" "js") -- Treatment of raw data.  Passed to \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}}

\item{null}{("list" "null") -- Treatment of null fields. Passed to \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}}

\item{na}{("null" "string") -- Representation for NA's.  Passed to \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}}

\item{obj}{The object being serialized}

\item{ml}{A list of fields of the object; usually \code{attributes(obj)}.}
}
\value{
The function \code{as.json} returns a unicode string with a serialized
version of the object.

The function \code{as.jlist} returns a list of the fields of the object
which need to be serialized (usually through a call to
\code{\link[jsonlite]{toJSON}}.
}
\description{
These methods extend the \code{\link[jsonlite]{toJSON}} function providing
an extensible protocol for serializing S4 objects.  The function
\code{as.json} turns the object into a string containing a JSON document by
first calling \code{as.jlist} to convert the object into a list and then
calling \code{toJSON} to do the work.
}
\details{
The existing \code{\link[jsonlite]{toJSON}} does not support S4 objects, and
the \code{\link[jsonlite]{serializeJSON}} provides too much detail; so while
it is good for saving and restoring R objects, it is not good for sharing
data between programs.  The function \code{as.json} and \code{as.jlist} are
S4 generics, so they can be easily extended to other classes.

The default method for \code{as.json} is essentially \code{toJSON(
as.jlist(x, attributes(x)))}.  The function \code{attributes(x)} turns the
fields of the object into a list, and then the appropriate method for
\code{as.jlist} further processes those objects.  For example, it can set
the \code{"_id"} field used by the Mongo DB as a unique identifier (or other
derived fields) to \code{NULL}.

Another important step is to call \code{unboxer} on fields which should not
be stored as vectors.  The function \code{toJSON} by default wraps all R
objects in \sQuote{[]} (after all, they are all vectors), but that is
probably not useful if the field is to be used as an index.  Wrapping the
field in \code{unboxer()}, i.e., using \code{ml$field <- unboxer(ml$field)},
suppresses the brackets.  The function \code{unboxer()} in this package is
an extension of the \code{jsonlite::\link[jsonlite]{unbox}} function, which
does not properly unbox POSIXt objects.

Finally, for a field that can contain arbitrary R objects, the function
\code{\link{unparseData}} coverts the data into a JSON string which will
completely recover the data.  The \code{serialize} argument is passed to
this function.  If true, then \code{\link[jsonlite]{serializeJSON}} is used
which produces safe, but not particularly human editable JSON.  If false, a
simpler method is employed which produes more human readable code.  This
with should work for simpler data types, but does not support objects, and
may fail with complex lists.
}
\section{Methods (by class)}{
\itemize{
\item \code{as.json(MongoRec)}: The \code{as.json} for  \verb{\linkS4class{MongoRec}} objects defaults to
using "mongo" format for the \code{POSIXt} and \code{raw} options.

\item \code{as.jlist(obj = ANY, ml = list)}: This is the default method, it simply returns
the list of slots \code{ml}.  This also does not contain a call to
\code{callNextMethod}, so it will serve as the termination point for an
inheritance chain.

\item \code{as.jlist(obj = MongoRec, ml = list)}: This method actually removes the Mongo id
(\verb{_id}) as generally, that is not pass as part of an update query.

}}
\examples{
\dontrun{
vingette("JSON for S4 Objects")
}

}
\seealso{
In this package: \code{\link{buildObject}}, \code{\link{saveRec}},
\code{\link{parseData}}, \code{\link{parseSimpleData}}

In the jsonlite package: \code{\link[jsonlite]{toJSON}},
\code{\link[jsonlite]{serializeJSON}},
\code{jsonlite::\link[jsonlite]{unbox}}
}
\author{
Russell Almond
}
\keyword{IO}
\keyword{interfaces}
