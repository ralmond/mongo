% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FakeMongo.R
\docType{class}
\name{iterator-class}
\alias{iterator-class}
\alias{iterator}
\title{An object which iterates over a collection}
\value{
An object of class iterator.
}
\description{
An object which iterates over a collection
}
\section{Fields}{

\describe{
\item{\code{elements}}{list -- The object to return}

\item{\code{position}}{integer -- a pointer to the last returned object

# Methods

* `$hasNext()` -- logical; returns `TRUE` if collection has been exhausted.
* `$nextElement(warn=TRUE)` -- returns the next element of the collection.  If there are no unused elements left,
 the method issues a warning (if `warn` is `TRUE`) and returns `NULL`
* `$one()` -- A synonym for `$nextElement(warn=FALSE)`.  For compatibility with the internal iterator class
 returned by `\link{mdbIterate}.
* `$batch(count)` -- Returns the next `count` elements in the collection (updating the internal pointer by
  `count`.
* `$reset(newElements=list())` -- Resets the pointer back to the beginning of the element collection.
If the `newElements` argument is not missing, it also replaces the elements collection with the value of
`newElements`.}
}}


\note{
This is a utility class that serves two purposes.
(1) It implements a result queue for the `linkS4class{fake_mongo}` class.
(2) it mimics the iterator returned by the `mdbIterate()`
generic function, and so can be used in the result queue for the `mdbIterate-fake_mongo` method.

Unlike the internal iterator class from the `mongolite`, this one has a `$hasNext()` method which is
part of the general iterator recipe.  The `$one()` and `$batch()` methods should be compatible with the
internal `mongolite` iterator, can so it can be used as drop in replacement.
}
\examples{
iter <- iterator(as.list(1:5))
while (iter$hasNext())
  print(iter$nextElement())


}
\seealso{
`\linkS4class{fake_mongo}`, [mdbIterate()]
}
