% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MongoDB.R
\name{mdbInsert}
\alias{mdbInsert}
\alias{mdbInsert,MongoDB-method}
\alias{mdbInsert,mongo-method}
\title{Insert a new record into a collection}
\usage{
mdbInsert(db, data, pagesize = 1000, stop_on_error = TRUE, ...)

\S4method{mdbInsert}{MongoDB}(db, data, pagesize = 1000, stop_on_error = TRUE, ...)

\S4method{mdbInsert}{mongo}(db, data, pagesize = 1000, stop_on_error = TRUE, ...)
}
\arguments{
\item{db}{(or MongoDB mongo) -- Collection into which new recrods
will be inserted}

\item{data}{(or data.frame named list character) -- New data to be inserted.}

\item{pagesize}{integer -- size of data stores}

\item{stop_on_error}{logical}

\item{...}{-- extra data}
}
\value{
Object of class \code{miniprint} giving status information.
}
\description{
Inserts one or more records.  If the \code{data} argument is a \code{data.frame}, then
each row becomes a new record.
}
\details{
\subsection{Data frames}{

Data frames are converted into mongo documents and then inserted.
Each row is a document, and the fields in the document correspond
to properties.  This is perhaps the easiest way to use this
function.  \code{mdbInsert} save a data frame in a mongo collection and
\verb{\link{mdbFind}} retrieves it.
}

\subsection{Character}{

An alternative is to express the document to be stored as a JSON
string.  If the input is a character vector with each element being
a complete JSON document, these will be added to the collection.
The function \verb{\link[jsonlite]\{serializeJSON\}} in the jsonlite
package converts an R object to JSON in a way that will reproduce
the object but is not particularly easy to find or index in the
database.  The function \verb{\link{jsonlite}{toJSON}} produces a more
readable version, but still has issues (in partuclar, it does not
distinguish between scalar and vector fields).  The function
\verb{\link{as.json}} provides a mechanism for encoding S4 objects as
JSON expressions.

The function \verb{\link{saveRec}} provides a more object-oriented
interface for saving a single S4 object.
}

\subsection{List}{

The source code for \verb{\link[mongolite]\{mongo\}()$insert()} provides a
mechanism for using lists, but does not describe what the lists
elements should be.
}
}
\examples{
irisdb <- MongoDB("iris",noMongo=!interactive())
mdbDrop(irisdb)
mdbInsert(irisdb,iris)
irisdb <- MongoDB("iris",noMongo=!interactive())
mdbDrop(irisdb)
mdbInsert(irisdb,iris)
testdb <- MongoDB("test",noMongo=!interactive())
mdbDrop(testdb)
mdbInsert(testdb,'{"Student":"Fred", "Scores":[83, 87, 91, 79],
"Grade":"B"}')

}
\seealso{
\verb{\link[mongolite]\{mongo\}}, \verb{\link[jsonlite]\{toJSON\}},
\verb{\link[jsonlite]\{serializeJSON\}}, \verb{\link{as.json}}, \verb{\link{saveRec}}
\url{https://www.mongodb.com/docs/manual/reference/method/db.collection.insert/}
}
